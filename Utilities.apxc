public class Utilities {
    public static Map<Id, Product2> getProductMapFromList(List<Product2> products){
        Map<Id, Product2> productMap = new Map<Id, Product2>();
        for(Product2 product: products){
            productMap.put(product.Id, product);
        }
        return productMap;
    }
    
    public static List<Product2> getListProductsFromMap(Map<Id, Product2> productMap){
        return new List<Product2>(productMap.values());
    }
    
    public static Map<Id, Cart__c> updateCart(Map<Id, Cart__c> mapProductCart, Product2 product, Integer items){
        if(mapProductCart == null){
            mapProductCart = new Map<Id, Cart__c>();
        }
        if(Integer.valueOf(product.Stock__c)-items >= 0){
            if(mapProductCart.containsKey(product.Id)){
                Cart__c cart = mapProductCart.get(product.Id);
                if(cart.SelectedItem__c + items > 0){
                	cart.SelectedItem__c = cart.SelectedItem__c+items;
                	mapProductCart.put(product.Id, cart);
                }else{
                    mapProductCart.remove(product.Id);
                }
        	}else{
                if(items>0){
                 	Cart__c cart = new Cart__c(Name= product.Name,Product__c = product.Id, SelectedItem__c = items,
                                          Price__c = product.Price__c);
                 	mapProductCart.put(product.Id, cart);   
                }
        	}
        }
        return mapProductCart;
    }
    
    public static Product2 updateProduct(Product2 product, Integer items){
        Integer stock = Integer.valueOf(product.Stock__c);
        if(stock - items >= 0){
            product.Stock__c = stock - items;
        }
        return product;
    }
    
    public static List<Cart__c> getListCartFromMap(Map<Id, Cart__c> mapProductCart){
        return new List<Cart__c>(mapProductCart.values());
    }
    
    public static String generateRandomString(Integer len) {
    	final String chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
    	String randStr = '';
    	while (randStr.length() < len) {
       		Integer idx = Math.mod(Math.abs(Crypto.getRandomInteger()), chars.length());
       		randStr += chars.substring(idx, idx+1);
    	}
    	return randStr; 
	}
    
    public static Decimal getOrderTotal(List<Cart__c> items){
        Decimal orderTotal = 0;
        for(Cart__c cart: items){
            orderTotal += cart.Price__c * cart.SelectedItem__c;
        }
        return orderTotal;
    }
}